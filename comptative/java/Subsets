import java.util.ArrayList;
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>>als=new ArrayList<>();
      
        int n=nums.length;
        for(int i=0;i<=(1<<n)-1;i++){ 
            List<Integer> ls=new ArrayList<>();
            for(int j=0;j<=n-1;j++){
                if((i&(1<<j))!=0){
                  ls.add(nums[j]);
                }
            }
            als.add(ls);
        }
        
        return als;
    }
}


//back tracking
class Solution {
  List<List<Integer>> output = new ArrayList();
  int n, k;

  public void backtrack(int first, ArrayList<Integer> curr, int[] nums) {
    // if the combination is done
    if (curr.size() == k) {
      output.add(new ArrayList(curr));
      return;
    }
    for (int i = first; i < n; ++i) {
      // add i into the current combination
      curr.add(nums[i]);
      // use next integers to complete the combination
      backtrack(i + 1, curr, nums);
      // backtrack
      curr.remove(curr.size() - 1);
    }
  }

  public List<List<Integer>> subsets(int[] nums) {
    n = nums.length;
    for (k = 0; k < n + 1; ++k) {
      backtrack(0, new ArrayList<Integer>(), nums);
    }
    return output;
  }
}
