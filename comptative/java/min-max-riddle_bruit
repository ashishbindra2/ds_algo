//bruit aproch
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the riddle function below.
    public static long[] getMinAr(long k,long[] a)
    {
        if(k==a.length)
            return a;
        long arr[] = new long[(int)(a.length-k)];
        for(int i=0;i<a.length-k;i++){//4-1 3
             int min=10000;
             if(k+i<a.length){    // k=1,0
           for(int j=i;j<=k+i;j++)// 2 6 1 12
             {                    // 0 1 2 3
                 if(a[j]<min)
                   min =(int)a[j];
             }
             arr[i]=min;
             }
        }
        return arr;
        
    }
    static long[] riddle(long[] arr) {
        // complete this function
        int n=arr.length; 
        long ar[] = new long[n];
         long ar1[] = new long[n];
        int k=0;
        for(int i=0;i<n;i++){
             int max=0;
         ar = getMinAr(k,arr); 
         for(int j=0;j<ar.length;j++){
          if(max<ar[j]) 
            max  = (int) ar[j]; 
     } 
     k++;
     ar1[i]=max;
     //System.out.print(max+"\n");
    }
    return ar1;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        long[] arr = new long[n];

        String[] arrItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            long arrItem = Long.parseLong(arrItems[i]);
            arr[i] = arrItem;
        }

        long[] res = riddle(arr);

        for (int i = 0; i < res.length; i++) {
            bufferedWriter.write(String.valueOf(res[i]));

            if (i != res.length - 1) {
                bufferedWriter.write(" ");
            }
        }

        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
