public class Solution {
    
    private final long MOD = 10000003;
    
    private boolean isPossible(ArrayList<Integer> boards, long maxTime, int painters, int time) {
            int prev = 0;
            while (painters-- > 0) {
                long sum = 0;
                int index = prev;
                while (index < boards.size()) {
                    if (sum + (1L * boards.get(index) * time) > maxTime) {
                        break;
                    }else {
                        sum += (1L * boards.get(index++) * time);
                    }
                }
                prev = index;
            }
            return prev == boards.size();
    }
    
	public int paint(int painters, int time, ArrayList<Integer> boards) {
	    if (time < 1 || painters < 1) {
	        return Integer.MAX_VALUE;
	    }
	    long sum = 0;
	    long max = Long.MIN_VALUE;
	    for (int board : boards) {
	        sum += board;
	        max = Math.max(board, max);
	    }
	    if (painters >= boards.size()) {
	        return (int)(max * time);
	    }
	    long low = 0;
	    long high = Long.MAX_VALUE;
	    long result = Long.MAX_VALUE;
	    //System.out.println(high);
	    while (low <= high) {
	        
	        long mid = low + (high - low)/2;
	        if (isPossible(boards, mid, painters, time)) {
                result = mid;
	            high = mid - 1;
	        }else {
	            low = mid + 1;
	        }
	    }
	    //there always exist a solution for k > 0
	    return (int)(result%MOD);
	}
}
